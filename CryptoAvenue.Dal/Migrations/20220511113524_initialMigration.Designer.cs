// <auto-generated />
using System;
using CryptoAvenue.Dal;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CryptoAvenue.Dal.Migrations
{
    [DbContext(typeof(CryptoAvenueContext))]
    [Migration("20220511113524_initialMigration")]
    partial class initialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CryptoAvenue.Domain.Models.Coin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Abreviation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ValueInBTC")
                        .HasColumnType("float");

                    b.Property<double>("ValueInEUR")
                        .HasColumnType("float");

                    b.Property<double>("ValueInUSD")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Coins");
                });

            modelBuilder.Entity("CryptoAvenue.Domain.Models.TradeOffer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("ReceivedAmount")
                        .HasColumnType("float");

                    b.Property<Guid>("ReceivedCoinID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RecipientID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SenderID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("SentAmount")
                        .HasColumnType("float");

                    b.Property<Guid>("SentCoinID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ReceivedCoinID");

                    b.HasIndex("RecipientID");

                    b.HasIndex("SenderID");

                    b.HasIndex("SentCoinID");

                    b.ToTable("Offers");
                });

            modelBuilder.Entity("CryptoAvenue.Domain.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PrivateProfile")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityQuestion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CryptoAvenue.Domain.Models.Wallet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("CoinAmount")
                        .HasColumnType("float");

                    b.Property<Guid>("CoinID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CoinID");

                    b.HasIndex("UserID");

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("CryptoAvenue.Domain.Models.TradeOffer", b =>
                {
                    b.HasOne("CryptoAvenue.Domain.Models.Coin", "ReceivedCoin")
                        .WithMany("OffersReceived")
                        .HasForeignKey("ReceivedCoinID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CryptoAvenue.Domain.Models.User", "Recipient")
                        .WithMany("OffersReceived")
                        .HasForeignKey("RecipientID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CryptoAvenue.Domain.Models.User", "Sender")
                        .WithMany("OffersSent")
                        .HasForeignKey("SenderID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CryptoAvenue.Domain.Models.Coin", "SentCoin")
                        .WithMany("OffersSent")
                        .HasForeignKey("SentCoinID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ReceivedCoin");

                    b.Navigation("Recipient");

                    b.Navigation("Sender");

                    b.Navigation("SentCoin");
                });

            modelBuilder.Entity("CryptoAvenue.Domain.Models.Wallet", b =>
                {
                    b.HasOne("CryptoAvenue.Domain.Models.Coin", "CoinType")
                        .WithMany()
                        .HasForeignKey("CoinID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CryptoAvenue.Domain.Models.User", "WalletOwner")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CoinType");

                    b.Navigation("WalletOwner");
                });

            modelBuilder.Entity("CryptoAvenue.Domain.Models.Coin", b =>
                {
                    b.Navigation("OffersReceived");

                    b.Navigation("OffersSent");
                });

            modelBuilder.Entity("CryptoAvenue.Domain.Models.User", b =>
                {
                    b.Navigation("OffersReceived");

                    b.Navigation("OffersSent");
                });
#pragma warning restore 612, 618
        }
    }
}
